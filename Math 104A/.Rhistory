bb <- matrix(rep(1,4), nrow=2)
cc <- matrix(rep(1,4), nrow=2)
aa[1,2] <- uVec %*% ginv(co) %*% t(mm)
aa[2,1] <- myMu
aa[2,2] <- mm %*% ginv(co) %*% t(mm)
bb[1,1] <- uVec %*% ginv(co) %*% t(uVec)
bb[2,1] <- mm %*% ginv(co) %*% t(uVec)
bb[2,2] <- myMu
cc[1,1] <- bb[1,1]
cc[1,2] <- aa[1,2]
cc[2,1] <- bb[2,1]
cc[2,2] <- aa[2,2]
myW <- (det(aa)*uVec %*% ginv(co) + det(bb)*mm %*% ginv(co))/det(cc)
return(myW)
}
uVec <- t(array(dim=c(3,1),c(1,1,1)))
wMin <- uVec %*%ginv(C)
wMin <- wMin/(uVec%*%ginv(C)%*%t(uVec))[1]
plot(sigmaX(wMin, co = C), muX(wMin), cex=2, pch=18, xaxs="i",
col="red", xlim=c(0,0.4), ylim=c(0.05,0.3))
plotW( c(1,0,0), col="blue") # original assets
mu <- t(array(c(0.1, 0.15, 0.2)))
C <- matrix(nrow=3, c(0.0784, -0.0067, 0.0175,
-0.0067, 0.0576, 0.012,
0.0175, 0.0120, 0.0625), byrow=T)
muX <- function( w,m=mu) {
w <- t(array(w))
return (as.numeric(w%*% t(m)))
}
sigmaX <- function(w,co=C) {
w <- t(array(w))
return (sqrt(as.numeric( w %*% co %*% t(w))))
}
plotW <- function(w, co=C, mm=mu,...) {
# Add risk-return points to EXISTING PLOT
# given vectors of weights(w), returns (mm), and covariance matrix (co)
points(sigmaX(w), muX(w),...)
}
effPort <- function( myMu=0.2, mm=mu, co=C) {
uVec <- t(array(dim=c(dim(co)[1],1),rep(1, dim(co)[1])))
aa <- matrix(rep(1,4), nrow=2)
bb <- matrix(rep(1,4), nrow=2)
cc <- matrix(rep(1,4), nrow=2)
aa[1,2] <- uVec %*% ginv(co) %*% t(mm)
aa[2,1] <- myMu
aa[2,2] <- mm %*% ginv(co) %*% t(mm)
bb[1,1] <- uVec %*% ginv(co) %*% t(uVec)
bb[2,1] <- mm %*% ginv(co) %*% t(uVec)
bb[2,2] <- myMu
cc[1,1] <- bb[1,1]
cc[1,2] <- aa[1,2]
cc[2,1] <- bb[2,1]
cc[2,2] <- aa[2,2]
myW <- (det(aa)*uVec %*% ginv(co) + det(bb)*mm %*% ginv(co))/det(cc)
return(myW)
}
uVec <- t(array(dim=c(3,1),c(1,1,1)))
wMin <- uVec %*%ginv(C)
wMin <- wMin/(uVec%*%ginv(C)%*%t(uVec))[1]
plot(sigmaX(wMin, co = C), muX(wMin), cex=2, pch=18, xaxs="i",
col="red", xlim=c(0,0.4), ylim=c(0.05,0.3))
plotW( c(1,0,0), col="blue") # original assets
plotW( c(0,1,0), col="blue")
plotW( c(0,0,1), col="blue")
plotW( effPort(myMu=0.12), col="pink")
for (i in 1:50)
plotW( effPort(myMu=i/200))
uVec
mu <- t(array(c(0.1, 0.15, 0.2)))
C <- matrix(nrow=3, c(0.0784, -0.0067, 0.0175,
-0.0067, 0.0576, 0.012,
0.0175, 0.0120, 0.0625), byrow=T)
muX <- function( w,m=mu) {
w <- t(array(w))
return (as.numeric(w%*% t(m)))
}
sigmaX <- function(w,co=C) {
w <- t(array(w))
return (sqrt(as.numeric( w %*% co %*% t(w))))
}
plotW <- function(w, co=C, mm=mu,...) {
# Add risk-return points to EXISTING PLOT
# given vectors of weights(w), returns (mm), and covariance matrix (co)
points(sigmaX(w), muX(w),...)
}
effPort <- function( myMu=0.2, mm=mu, co=C) {
uVec <- t(array(dim=c(dim(co)[1],1),rep(1, dim(co)[1])))
aa <- matrix(rep(1,4), nrow=2)
bb <- matrix(rep(1,4), nrow=2)
cc <- matrix(rep(1,4), nrow=2)
aa[1,2] <- uVec %*% ginv(co) %*% t(mm)
aa[2,1] <- myMu
aa[2,2] <- mm %*% ginv(co) %*% t(mm)
bb[1,1] <- uVec %*% ginv(co) %*% t(uVec)
bb[2,1] <- mm %*% ginv(co) %*% t(uVec)
bb[2,2] <- myMu
cc[1,1] <- bb[1,1]
cc[1,2] <- aa[1,2]
cc[2,1] <- bb[2,1]
cc[2,2] <- aa[2,2]
myW <- (det(aa)*uVec %*% ginv(co) + det(bb)*mm %*% ginv(co))/det(cc)
return(myW)
}
C
mu
effPort(0.15)
effPort(0.15, mm = mu, co = C)
mu <- t(array(c(0.1, 0.15, 0.2)))
C <- matrix(nrow=3, c(0.0784, -0.0067, 0.0175,
-0.0067, 0.0576, 0.012,
0.0175, 0.0120, 0.0625), byrow=T)
muX <- function( w,m=mu) {
w <- t(array(w))
return (as.numeric(w%*% t(m)))
}
sigmaX <- function(w,co=C) {
w <- t(array(w))
return (sqrt(as.numeric( w %*% co %*% t(w))))
}
plotW <- function(w, co=C, mm=mu,...) {
# Add risk-return points to EXISTING PLOT
# given vectors of weights(w), returns (mm), and covariance matrix (co)
points(sigmaX(w), muX(w,mm=mm),...)
}
effPort <- function( myMu=0.2, mm=mu, co=C) {
uVec <- t(array(dim=c(dim(co)[1],1),rep(1, dim(co)[1])))
aa <- matrix(rep(1,4), nrow=2)
bb <- matrix(rep(1,4), nrow=2)
cc <- matrix(rep(1,4), nrow=2)
aa[1,2] <- uVec %*% ginv(co) %*% t(mm)
aa[2,1] <- myMu
aa[2,2] <- mm %*% ginv(co) %*% t(mm)
bb[1,1] <- uVec %*% ginv(co) %*% t(uVec)
bb[2,1] <- mm %*% ginv(co) %*% t(uVec)
bb[2,2] <- myMu
cc[1,1] <- bb[1,1]
cc[1,2] <- aa[1,2]
cc[2,1] <- bb[2,1]
cc[2,2] <- aa[2,2]
myW <- (det(aa)*uVec %*% ginv(co) + det(bb)*mm %*% ginv(co))/det(cc)
sprintf((det(aa)*uVec %*% ginv(co) + det(bb)*mm %*% ginv(co)))
return(myW)
}
effPort(myMu = 0.15)
mu <- t(array(c(0.1, 0.15, 0.2)))
C <- matrix(nrow=3, c(0.0784, -0.0067, 0.0175,
-0.0067, 0.0576, 0.012,
0.0175, 0.0120, 0.0625), byrow=T)
muX <- function( w,m=mu) {
w <- t(array(w))
return (as.numeric(w%*% t(m)))
}
sigmaX <- function(w,co=C) {
w <- t(array(w))
return (sqrt(as.numeric( w %*% co %*% t(w))))
}
plotW <- function(w, co=C, mm=mu,...) {
# Add risk-return points to EXISTING PLOT
# given vectors of weights(w), returns (mm), and covariance matrix (co)
points(sigmaX(w), muX(w,mm=mm),...)
}
effPort <- function( myMu=0.2, mm=mu, co=C) {
uVec <- t(array(dim=c(dim(co)[1],1),rep(1, dim(co)[1])))
aa <- matrix(rep(1,4), nrow=2)
bb <- matrix(rep(1,4), nrow=2)
cc <- matrix(rep(1,4), nrow=2)
aa[1,2] <- uVec %*% ginv(co) %*% t(mm)
aa[2,1] <- myMu
aa[2,2] <- mm %*% ginv(co) %*% t(mm)
bb[1,1] <- uVec %*% ginv(co) %*% t(uVec)
bb[2,1] <- mm %*% ginv(co) %*% t(uVec)
bb[2,2] <- myMu
cc[1,1] <- bb[1,1]
cc[1,2] <- aa[1,2]
cc[2,1] <- bb[2,1]
cc[2,2] <- aa[2,2]
myW <- (det(aa)*uVec %*% ginv(co) + det(bb)*mm %*% ginv(co))/det(cc)
print((det(aa)*uVec %*% ginv(co) + det(bb)*mm %*% ginv(co)))
return(myW)
}
effPort(myMu = 0.15)
mu <- t(array(c(0.1, 0.15, 0.2)))
C <- matrix(nrow=3, c(0.0784, -0.0067, 0.0175,
-0.0067, 0.0576, 0.012,
0.0175, 0.0120, 0.0625), byrow=T)
muX <- function( w,m=mu) {
w <- t(array(w))
return (as.numeric(w%*% t(m)))
}
sigmaX <- function(w,co=C) {
w <- t(array(w))
return (sqrt(as.numeric( w %*% co %*% t(w))))
}
plotW <- function(w, co=C, mm=mu,...) {
# Add risk-return points to EXISTING PLOT
# given vectors of weights(w), returns (mm), and covariance matrix (co)
points(sigmaX(w), muX(w,mm=mm),...)
}
effPort <- function( myMu=0.2, mm=mu, co=C) {
uVec <- t(array(dim=c(dim(co)[1],1),rep(1, dim(co)[1])))
aa <- matrix(rep(1,4), nrow=2)
bb <- matrix(rep(1,4), nrow=2)
cc <- matrix(rep(1,4), nrow=2)
aa[1,2] <- uVec %*% ginv(co) %*% t(mm)
aa[2,1] <- myMu
aa[2,2] <- mm %*% ginv(co) %*% t(mm)
bb[1,1] <- uVec %*% ginv(co) %*% t(uVec)
bb[2,1] <- mm %*% ginv(co) %*% t(uVec)
bb[2,2] <- myMu
cc[1,1] <- bb[1,1]
cc[1,2] <- aa[1,2]
cc[2,1] <- bb[2,1]
cc[2,2] <- aa[2,2]
myW <- (det(aa)*uVec %*% ginv(co) + det(bb)*mm %*% ginv(co))/det(cc)
print((det(aa)*uVec %*% ginv(co) + det(bb)*mm %*% ginv(co)))
print(det(cc))
return(myW)
}
effPort(0.15)
mu <- t(array(c(0.1, 0.15, 0.2)))
C <- matrix(nrow=3, c(0.0784, -0.0067, 0.0175,
-0.0067, 0.0576, 0.012,
0.0175, 0.0120, 0.0625), byrow=T)
muX <- function( w,m=mu) {
w <- t(array(w))
return (as.numeric(w%*% t(m)))
}
sigmaX <- function(w,co=C) {
w <- t(array(w))
return (sqrt(as.numeric( w %*% co %*% t(w))))
}
plotW <- function(w, co=C, mm=mu,...) {
# Add risk-return points to EXISTING PLOT
# given vectors of weights(w), returns (mm), and covariance matrix (co)
points(sigmaX(w), muX(w,mm=mm),...)
}
effPort <- function( myMu=0.2, mm=mu, co=C) {
uVec <- t(array(dim=c(dim(co)[1],1),rep(1, dim(co)[1])))
aa <- matrix(rep(1,4), nrow=2)
bb <- matrix(rep(1,4), nrow=2)
cc <- matrix(rep(1,4), nrow=2)
aa[1,2] <- uVec %*% ginv(co) %*% t(mm)
aa[2,1] <- myMu
aa[2,2] <- mm %*% ginv(co) %*% t(mm)
bb[1,1] <- uVec %*% ginv(co) %*% t(uVec)
bb[2,1] <- mm %*% ginv(co) %*% t(uVec)
bb[2,2] <- myMu
cc[1,1] <- bb[1,1]
cc[1,2] <- aa[1,2]
cc[2,1] <- bb[2,1]
cc[2,2] <- aa[2,2]
myW <- (det(aa)*uVec %*% ginv(co) + det(bb)*mm %*% ginv(co))/det(cc)
print((det(aa)*uVec %*% ginv(co) + det(bb)*mm %*% ginv(co)))
print(cc)
return(myW)
}
effPort(0.15)
mu <- t(array(c(0.1, 0.15, 0.2)))
C <- matrix(nrow=3, c(0.0784, -0.0067, 0.0175,
-0.0067, 0.0576, 0.012,
0.0175, 0.0120, 0.0625), byrow=T)
muX <- function( w,m=mu) {
w <- t(array(w))
return (as.numeric(w%*% t(m)))
}
sigmaX <- function(w,co=C) {
w <- t(array(w))
return (sqrt(as.numeric( w %*% co %*% t(w))))
}
plotW <- function(w, co=C, mm=mu,...) {
# Add risk-return points to EXISTING PLOT
# given vectors of weights(w), returns (mm), and covariance matrix (co)
points(sigmaX(w), muX(w,mm=mm),...)
}
effPort <- function( myMu=0.2, mm=mu, co=C) {
uVec <- t(array(dim=c(dim(co)[1],1),rep(1, dim(co)[1])))
aa <- matrix(rep(1,4), nrow=2)
bb <- matrix(rep(1,4), nrow=2)
cc <- matrix(rep(1,4), nrow=2)
aa[1,2] <- uVec %*% ginv(co) %*% t(mm)
aa[2,1] <- myMu
aa[2,2] <- mm %*% ginv(co) %*% t(mm)
bb[1,1] <- uVec %*% ginv(co) %*% t(uVec)
bb[2,1] <- mm %*% ginv(co) %*% t(uVec)
bb[2,2] <- myMu
cc[1,1] <- bb[1,1]
cc[1,2] <- aa[1,2]
cc[2,1] <- bb[2,1]
cc[2,2] <- aa[2,2]
myW <- (det(aa)*uVec %*% ginv(co) + det(bb)*mm %*% ginv(co))/det(cc)
print(aa)
return(myW)
}
effPort(0.15)
t(array(dim=c(dim(co)[1],1),rep(1, dim(co)[1])))
matrix(rep(1,4), nrow=2)
mu <- t(array(c(0.1, 0.15, 0.2)))
C <- matrix(nrow=3, c(0.0784, -0.0067, 0.0175,
-0.0067, 0.0576, 0.012,
0.0175, 0.0120, 0.0625), byrow=T)
muX <- function( w,m=mu) {
w <- t(array(w))
return (as.numeric(w%*% t(m)))
}
sigmaX <- function(w,co=C) {
w <- t(array(w))
return (sqrt(as.numeric( w %*% co %*% t(w))))
}
plotW <- function(w, co=C, mm=mu,...) {
# Add risk-return points to EXISTING PLOT
# given vectors of weights(w), returns (mm), and covariance matrix (co)
points(sigmaX(w), muX(w,mm=mm),...)
}
effPort <- function( myMu=0.2, mm=mu, co=C) {
uVec <- t(array(dim=c(dim(co)[1],1),rep(1, dim(co)[1])))
aa <- matrix(rep(1,4), nrow=2)
bb <- matrix(rep(1,4), nrow=2)
cc <- matrix(rep(1,4), nrow=2)
aa[1,2] <- uVec %*% ginv(co) %*% t(mm)
aa[2,1] <- myMu
aa[2,2] <- mm %*% ginv(co) %*% t(mm)
bb[1,1] <- uVec %*% ginv(co) %*% t(uVec)
bb[2,1] <- mm %*% ginv(co) %*% t(uVec)
bb[2,2] <- myMu
cc[1,1] <- bb[1,1]
cc[1,2] <- aa[1,2]
cc[2,1] <- bb[2,1]
cc[2,2] <- aa[2,2]
myW <- (det(aa)*uVec %*% ginv(co) + det(bb)*mm %*% ginv(co))/det(cc)
print(aa)
print(bb)
print(cc)
return(myW)
}
effPort(0.15)
library(knitr)
library(dplyr)
library(kableExtra)
library(tidyverse)
library(agricolae)
options(knitr.table.format = "latex")
uniformity <-c(2.76, 5.67, 4.49, 1.43, 1.70, 2.19,
2.34, 1.97, 1.47, 0.94, 1.36, 1.65)
wafer <- as.factor(rep(1:4, each=3))
fit <- aov(uniformity~wafer)
summary(fit)
par(mfrow = c(1, 2))
anova_lm <- lm(uniformity~wafer)
qqnorm(anova_lm$residuals)
qqline(anova_lm$residuals, col = 'red')
plot(anova_lm$fitted.values, anova_lm$residuals,
xlab = "Fitted Values", ylab = "Residuals",
main = "Residuals vs Fitted Values")
abline(h = 0)
library(knitr)
library(dplyr)
library(kableExtra)
library(tidyverse)
options(knitr.table.format = "latex")
bioactivity <- data.frame(obs = c(24, 28, 37, 30, 37, 44, 31, 35,
42, 47, 52, 38), dosage = rep(c(20, 30, 40), each= 4))
a <- 3
n <- 4
N <- a*n
# SST
SST <- sum( (bioactivity$obs - mean(bioactivity$obs))^2 )
cat(sprintf('SST: %s\n', SST))
# SS_Treatments
df.groupmean <- bioactivity %>%
group_by(dosage) %>%
summarise(groupmean = mean(obs))
SS.treatment <- n*sum((df.groupmean$groupmean - mean(bioactivity$obs))^2)
cat(sprintf('SS_Treatments: %s\n', SS.treatment))
# SSE
SS.E <- SST - SS.treatment
cat(sprintf('SSE: %s\n', SS.E))
# Comparing MS_Treatments and MS_E
MS_Treatments <- SS.treatment/(a-1)
MS_E <- SS.E/(N-a)
cat(sprintf('\nMS_Treatments: %s\n', MS_Treatments))
cat(sprintf('MS_E: %s\n', MS_E))
# F-test
F0 <- MS_Treatments/MS_E
cat(sprintf('\nF0: %s\n', F0))
cat(sprintf('F_(0.05, 2, 9): %s', qf(0.05, a-1, N-a, lower.tail = F)))
ybar1 <- df.groupmean[df.groupmean$dosage == 20, ]$groupmean
ybar2 <- df.groupmean[df.groupmean$dosage == 30, ]$groupmean
SS.C1 <- (ybar1 - ybar2)^2 / (1/n * 2)
# F-test
F0 <- (SS.C1/1) / MS_E
cat(sprintf('\nF0: %s\n', F0))
cat(sprintf('F_(0.05, 1, 9): %s', qf(0.05, 1, N-a, lower.tail = F)))
ybar3 <-  df.groupmean[df.groupmean$dosage == 40, ]$groupmean
SS.C2 <- (ybar2 - ybar3)^2 / (1/n * 2)
# F-test
F0 <- (SS.C2/1) / MS_E
cat(sprintf('\nF0: %s\n', F0))
cat(sprintf('F_(0.05, 1, 9): %s', qf(0.05, 1, N-a, lower.tail = F)))
SS.C3 <- (ybar1 - ybar3)^2 / (1/n * 2)
# F-test
F0 <- (SS.C3/1) / MS_E
cat(sprintf('\nF0: %s\n', F0))
cat(sprintf('F_(0.05, 1, 9): %s', qf(0.05, 1, N-a, lower.tail = F)))
fit <- aov(obs ~ dosage, data = bioactivity)
par(mfrow = c(2, 3))
#1. Independence: Plot residuals vs. index
plot(fit$residuals, ylab = 'fitted values', xlab = 'index')
abline(h = 0)
#2. Constant variance: residuals vs. fitted values
plot(fit$fitted.values, fit$residuals, xlab = "fitted values", ylab = "residuals")
abline(h = 0)
#3. Normality and Outliers: Normal Q-Q plot
par(pty="s")
qqnorm(fit$residuals)
qqline(fit$residuals)
library(knitr)
library(reticulate)
pd <- import("pandas")
math <- import("math")
np <- import("numpy")
# Reading the stock file
stocks <- read.csv("IBM-MSFT-HAS.csv")
# Choosing data from November to April
data_subset <- stocks[(which(stocks[,1]=="11/1/2017"):length(stocks[,1])),]
#Assigning respective data to the respective ticker
IBM <- data_subset[,2]
MSFT <- data_subset[,3]
HAS <- data_subset[,4]
return_IBM <- rep(0,length(IBM)-1)
return_MSFT <- rep(0,length(MSFT)-1)
return_HAS <- rep(0,length(HAS)-1)
for (i in 1:(length(MSFT)-1)) {
return_IBM[i] <- (IBM[i+1]-IBM[i])/IBM[i]
return_MSFT[i] <- (MSFT[i+1]-MSFT[i])/MSFT[i]
return_HAS[i] <- (HAS[i+1]-HAS[i])/HAS[i]
}
daily_mu_IBM <- mean(return_IBM)
daily_mu_MSFT <- mean(return_MSFT)
daily_mu_HAS <- mean(return_HAS)
monthly_mu_IBM <- 20 * daily_mu_IBM
monthly_mu_MSFT <- 20 * daily_mu_MSFT
monthly_mu_HAS <- 20 * daily_mu_HAS
mu <- t(array(c(monthly_mu_IBM, monthly_mu_MSFT, monthly_mu_HAS)))
# Converting yearly rate to monthly rate
r <- (1.02)^{1/12}-1
# Taking unit vector
uVec <- t(array(dim=c(dim(co)[1],1),rep(1, dim(co)[1])))
# calculating weight using market portfolio formula
w <- (mu-r*uVec) %*% ginv(co)
library(base)
library(MASS)
# Reading the stock file
stocks <- read.csv("IBM-MSFT-HAS.csv")
# Choosing data from November to April
data_subset <- stocks[(which(stocks[,1]=="11/1/2017"):length(stocks[,1])),]
#Assigning respective data to the respective ticker
IBM <- data_subset[,2]
MSFT <- data_subset[,3]
HAS <- data_subset[,4]
return_IBM <- rep(0,length(IBM)-1)
return_MSFT <- rep(0,length(MSFT)-1)
return_HAS <- rep(0,length(HAS)-1)
for (i in 1:(length(MSFT)-1)) {
return_IBM[i] <- (IBM[i+1]-IBM[i])/IBM[i]
return_MSFT[i] <- (MSFT[i+1]-MSFT[i])/MSFT[i]
return_HAS[i] <- (HAS[i+1]-HAS[i])/HAS[i]
}
daily_mu_IBM <- mean(return_IBM)
daily_mu_MSFT <- mean(return_MSFT)
daily_mu_HAS <- mean(return_HAS)
monthly_mu_IBM <- 20 * daily_mu_IBM
monthly_mu_MSFT <- 20 * daily_mu_MSFT
monthly_mu_HAS <- 20 * daily_mu_HAS
mu <- t(array(c(monthly_mu_IBM, monthly_mu_MSFT, monthly_mu_HAS)))
# Converting yearly rate to monthly rate
r <- (1.02)^{1/12}-1
# Taking unit vector
uVec <- t(array(dim=c(dim(co)[1],1),rep(1, dim(co)[1])))
# calculating weight using market portfolio formula
w <- (mu-r*uVec) %*% ginv(co)
# Normalizing weight
w <- w/sum(w)
# Taking transpose of weight
w_transpose <- t(w)
market_mu <- muX(w_transpose, mu)
co <- (20^2)*cov(cbind(return_IBM, return_MSFT, return_HAS))
market_mu
w
data_subset
return_HAS
w
w_transpose
ginv(co)
mu-r*uVec
mu
HAS
length(HAS)
mu
return_HAS
len(return_HAS)
length(return_HAS)
co
N = 3
ZN <- rep(0,2^N)
ZN
array(0, dim=c(2^N))
expand.grid(rep(list(0:1), N))
rep(list(0:1), N)
w <- expand.grid(rep(list(0:1), N))
w[1,]
w
w[1,] == 1
